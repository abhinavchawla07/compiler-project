Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ASSERT
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    BLOCK_COMMENT
    CONST
    DECR
    DIV
    GREATER
    GREQ
    INCR
    INLINE_COMMENT
    LESEQ
    LESSER
    LOGIC_AND
    LOGIC_NOT
    LOGIC_OR
    LSHIFT
    MOD
    NATIVE
    NOTEQ
    QUES
    RSHIFT
    SEMICOLON

Grammar

Rule 0     S' -> Goal
Rule 1     Goal -> CompilationUnit
Rule 2     Literal -> INT_CONSTANT
Rule 3     Literal -> FLOAT_CONSTANT
Rule 4     Literal -> CHAR_CONSTANT
Rule 5     Literal -> STR_CONSTANT
Rule 6     Literal -> NULL
Rule 7     Type -> PrimitiveType
Rule 8     Type -> ReferenceType
Rule 9     PrimitiveType -> NumericType
Rule 10    PrimitiveType -> BOOLEAN
Rule 11    NumericType -> IntegralType
Rule 12    NumericType -> FloatingPointType
Rule 13    IntegralType -> BYTE
Rule 14    IntegralType -> SHORT
Rule 15    IntegralType -> INT
Rule 16    IntegralType -> LONG
Rule 17    IntegralType -> CHAR
Rule 18    FloatingPointType -> FLOAT
Rule 19    FloatingPointType -> DOUBLE
Rule 20    ReferenceType -> ArrayType
Rule 21    ReferenceType -> ClassType
Rule 22    ClassType -> Name
Rule 23    ArrayType -> PrimitiveType L_SQBR R_SQBR
Rule 24    ArrayType -> Name L_SQBR R_SQBR
Rule 25    ArrayType -> ArrayType L_SQBR R_SQBR
Rule 26    Name -> SimpleName
Rule 27    Name -> QualifiedName
Rule 28    SimpleName -> IDENTIFIER
Rule 29    QualifiedName -> Name DOT IDENTIFIER
Rule 30    CompilationUnit -> PackageDeclaration ImportDeclarations TypeDeclarations
Rule 31    CompilationUnit -> PackageDeclaration ImportDeclarations
Rule 32    CompilationUnit -> PackageDeclaration TypeDeclarations
Rule 33    CompilationUnit -> ImportDeclarations TypeDeclarations
Rule 34    CompilationUnit -> PackageDeclaration
Rule 35    CompilationUnit -> ImportDeclarations
Rule 36    CompilationUnit -> TypeDeclarations
Rule 37    CompilationUnit -> <empty>
Rule 38    ImportDeclarations -> ImportDeclaration
Rule 39    ImportDeclarations -> ImportDeclarations ImportDeclaration
Rule 40    TypeDeclarations -> TypeDeclaration
Rule 41    TypeDeclarations -> TypeDeclarations TypeDeclaration
Rule 42    PackageDeclaration -> PACKAGE Name STMT_TERMINATOR
Rule 43    ImportDeclaration -> SingleTypeImportDeclaration
Rule 44    ImportDeclaration -> TypeImportOnDemandDeclaration
Rule 45    SingleTypeImportDeclaration -> IMPORT Name STMT_TERMINATOR
Rule 46    TypeImportOnDemandDeclaration -> IMPORT Name DOT MULT STMT_TERMINATOR
Rule 47    TypeDeclaration -> ClassDeclaration
Rule 48    TypeDeclaration -> STMT_TERMINATOR
Rule 49    Modifiers -> Modifier
Rule 50    Modifiers -> Modifiers Modifier
Rule 51    Modifier -> STATIC
Rule 52    Modifier -> FINAL
Rule 53    ClassDeclaration -> Modifiers CLASS IDENTIFIER Super ClassBody
Rule 54    ClassDeclaration -> Modifiers CLASS IDENTIFIER ClassBody
Rule 55    ClassDeclaration -> CLASS IDENTIFIER Super ClassBody
Rule 56    ClassDeclaration -> CLASS IDENTIFIER ClassBody
Rule 57    Super -> EXTENDS ClassType
Rule 58    ClassBody -> BLOCK_OPENER BLOCK_CLOSER
Rule 59    ClassBody -> BLOCK_OPENER ClassBodyDeclarations BLOCK_CLOSER
Rule 60    ClassBodyDeclarations -> ClassBodyDeclaration
Rule 61    ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration
Rule 62    ClassBodyDeclaration -> ClassMemberDeclaration
Rule 63    ClassBodyDeclaration -> ConstructorDeclaration
Rule 64    ClassBodyDeclaration -> StaticInitializer
Rule 65    ClassMemberDeclaration -> FieldDeclaration
Rule 66    ClassMemberDeclaration -> MethodDeclaration
Rule 67    FieldDeclaration -> Modifiers Type VariableDeclarators STMT_TERMINATOR
Rule 68    FieldDeclaration -> Type VariableDeclarators STMT_TERMINATOR
Rule 69    VariableDeclarators -> VariableDeclarator
Rule 70    VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator
Rule 71    VariableDeclarator -> VariableDeclaratorId
Rule 72    VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer
Rule 73    VariableDeclaratorId -> IDENTIFIER
Rule 74    VariableDeclaratorId -> VariableDeclaratorId L_SQBR R_SQBR
Rule 75    VariableInitializer -> Expression
Rule 76    VariableInitializer -> ArrayInitializer
Rule 77    MethodDeclaration -> MethodHeader MethodBody
Rule 78    MethodHeader -> Modifiers Type MethodDeclarator Throws
Rule 79    MethodHeader -> Modifiers Type MethodDeclarator
Rule 80    MethodHeader -> Type MethodDeclarator Throws
Rule 81    MethodHeader -> Type MethodDeclarator
Rule 82    MethodHeader -> Modifiers VOID MethodDeclarator Throws
Rule 83    MethodHeader -> Modifiers VOID MethodDeclarator
Rule 84    MethodHeader -> VOID MethodDeclarator Throws
Rule 85    MethodHeader -> VOID MethodDeclarator
Rule 86    MethodDeclarator -> IDENTIFIER L_PAREN R_PAREN
Rule 87    MethodDeclarator -> IDENTIFIER L_PAREN FormalParameterList R_PAREN
Rule 88    FormalParameterList -> FormalParameter
Rule 89    FormalParameterList -> FormalParameterList COMMA FormalParameter
Rule 90    FormalParameter -> Type VariableDeclaratorId
Rule 91    Throws -> THROWS ClassTypeList
Rule 92    ClassTypeList -> ClassType
Rule 93    ClassTypeList -> ClassTypeList COMMA ClassType
Rule 94    MethodBody -> Block
Rule 95    MethodBody -> STMT_TERMINATOR
Rule 96    StaticInitializer -> STATIC Block
Rule 97    ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws ConstructorBody
Rule 98    ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody
Rule 99    ConstructorDeclaration -> ConstructorDeclarator Throws ConstructorBody
Rule 100   ConstructorDeclaration -> ConstructorDeclarator ConstructorBody
Rule 101   ConstructorDeclarator -> SimpleName L_PAREN FormalParameterList R_PAREN
Rule 102   ConstructorDeclarator -> SimpleName L_PAREN R_PAREN
Rule 103   ConstructorBody -> BLOCK_OPENER ExplicitConstructorInvocation BlockStatements BLOCK_CLOSER
Rule 104   ConstructorBody -> BLOCK_OPENER ExplicitConstructorInvocation BLOCK_CLOSER
Rule 105   ConstructorBody -> BLOCK_OPENER BlockStatements BLOCK_CLOSER
Rule 106   ConstructorBody -> BLOCK_OPENER BLOCK_CLOSER
Rule 107   ExplicitConstructorInvocation -> THIS L_PAREN ArgumentList R_PAREN STMT_TERMINATOR
Rule 108   ExplicitConstructorInvocation -> THIS L_PAREN R_PAREN STMT_TERMINATOR
Rule 109   ExplicitConstructorInvocation -> SUPER L_PAREN ArgumentList R_PAREN STMT_TERMINATOR
Rule 110   ExplicitConstructorInvocation -> SUPER L_PAREN R_PAREN STMT_TERMINATOR
Rule 111   ArrayInitializer -> BLOCK_OPENER VariableInitializers BLOCK_CLOSER
Rule 112   ArrayInitializer -> BLOCK_OPENER BLOCK_CLOSER
Rule 113   VariableInitializers -> VariableInitializer
Rule 114   VariableInitializers -> VariableInitializers COMMA VariableInitializer
Rule 115   Block -> BLOCK_OPENER BLOCK_CLOSER
Rule 116   Block -> BLOCK_OPENER BlockStatements BLOCK_CLOSER
Rule 117   BlockStatements -> BlockStatement
Rule 118   BlockStatements -> BlockStatements BlockStatement
Rule 119   BlockStatement -> LocalVariableDeclarationStatement
Rule 120   BlockStatement -> Statement
Rule 121   LocalVariableDeclarationStatement -> LocalVariableDeclaration STMT_TERMINATOR
Rule 122   LocalVariableDeclaration -> Type VariableDeclarators
Rule 123   Statement -> StatementWithoutTrailingSubstatement
Rule 124   Statement -> LabeledStatement
Rule 125   Statement -> IfThenStatement
Rule 126   Statement -> IfThenElseStatement
Rule 127   Statement -> WhileStatement
Rule 128   Statement -> ForStatement
Rule 129   StatementNoShortIf -> StatementWithoutTrailingSubstatement
Rule 130   StatementNoShortIf -> LabeledStatementNoShortIf
Rule 131   StatementNoShortIf -> IfThenElseStatementNoShortIf
Rule 132   StatementNoShortIf -> WhileStatementNoShortIf
Rule 133   StatementNoShortIf -> ForStatementNoShortIf
Rule 134   StatementWithoutTrailingSubstatement -> Block
Rule 135   StatementWithoutTrailingSubstatement -> EmptyStatement
Rule 136   StatementWithoutTrailingSubstatement -> ExpressionStatement
Rule 137   StatementWithoutTrailingSubstatement -> SwitchStatement
Rule 138   StatementWithoutTrailingSubstatement -> DoStatement
Rule 139   StatementWithoutTrailingSubstatement -> BreakStatement
Rule 140   StatementWithoutTrailingSubstatement -> ContinueStatement
Rule 141   StatementWithoutTrailingSubstatement -> ReturnStatement
Rule 142   StatementWithoutTrailingSubstatement -> ThrowStatement
Rule 143   StatementWithoutTrailingSubstatement -> TryStatement
Rule 144   EmptyStatement -> STMT_TERMINATOR
Rule 145   LabeledStatement -> IDENTIFIER COLON Statement
Rule 146   LabeledStatementNoShortIf -> IDENTIFIER COLON StatementNoShortIf
Rule 147   ExpressionStatement -> StatementExpression STMT_TERMINATOR
Rule 148   StatementExpression -> Assignment
Rule 149   StatementExpression -> PreIncrementExpression
Rule 150   StatementExpression -> PreDecrementExpression
Rule 151   StatementExpression -> PostIncrementExpression
Rule 152   StatementExpression -> PostDecrementExpression
Rule 153   StatementExpression -> MethodInvocation
Rule 154   StatementExpression -> ClassInstanceCreationExpression
Rule 155   IfThenStatement -> IF L_PAREN Expression R_PAREN Statement
Rule 156   IfThenElseStatement -> IF L_PAREN Expression R_PAREN StatementNoShortIf ELSE Statement
Rule 157   IfThenElseStatementNoShortIf -> IF L_PAREN Expression R_PAREN StatementNoShortIf ELSE StatementNoShortIf
Rule 158   SwitchStatement -> SWITCH L_PAREN Expression R_PAREN SwitchBlock
Rule 159   SwitchBlock -> BLOCK_OPENER BLOCK_CLOSER
Rule 160   SwitchBlock -> BLOCK_OPENER SwitchBlockStatementGroups SwitchLabels BLOCK_CLOSER
Rule 161   SwitchBlock -> BLOCK_OPENER SwitchBlockStatementGroups BLOCK_CLOSER
Rule 162   SwitchBlock -> BLOCK_OPENER SwitchLabels BLOCK_CLOSER
Rule 163   SwitchBlockStatementGroups -> SwitchBlockStatementGroup
Rule 164   SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup
Rule 165   SwitchBlockStatementGroup -> SwitchLabels BlockStatements
Rule 166   SwitchLabels -> SwitchLabel
Rule 167   SwitchLabels -> SwitchLabels SwitchLabel
Rule 168   SwitchLabel -> CASE ConstantExpression COLON
Rule 169   SwitchLabel -> DEFAULT COLON
Rule 170   WhileStatement -> WHILE L_PAREN Expression R_PAREN Statement
Rule 171   WhileStatementNoShortIf -> WHILE L_PAREN Expression R_PAREN StatementNoShortIf
Rule 172   DoStatement -> DO Statement WHILE L_PAREN Expression R_PAREN STMT_TERMINATOR
Rule 173   ForStatement -> FOR L_PAREN ForInit STMT_TERMINATOR Expression STMT_TERMINATOR ForUpdate R_PAREN Statement
Rule 174   ForStatement -> FOR L_PAREN STMT_TERMINATOR Expression STMT_TERMINATOR ForUpdate R_PAREN Statement
Rule 175   ForStatement -> FOR L_PAREN ForInit STMT_TERMINATOR STMT_TERMINATOR ForUpdate R_PAREN Statement
Rule 176   ForStatement -> FOR L_PAREN ForInit STMT_TERMINATOR Expression STMT_TERMINATOR R_PAREN Statement
Rule 177   ForStatement -> FOR L_PAREN ForInit STMT_TERMINATOR STMT_TERMINATOR R_PAREN Statement
Rule 178   ForStatement -> FOR L_PAREN STMT_TERMINATOR Expression STMT_TERMINATOR R_PAREN Statement
Rule 179   ForStatement -> FOR L_PAREN STMT_TERMINATOR STMT_TERMINATOR ForUpdate R_PAREN Statement
Rule 180   ForStatement -> FOR L_PAREN STMT_TERMINATOR STMT_TERMINATOR R_PAREN Statement
Rule 181   ForStatementNoShortIf -> FOR L_PAREN ForInit STMT_TERMINATOR Expression STMT_TERMINATOR ForUpdate R_PAREN StatementNoShortIf
Rule 182   ForStatementNoShortIf -> FOR L_PAREN STMT_TERMINATOR Expression STMT_TERMINATOR ForUpdate R_PAREN StatementNoShortIf
Rule 183   ForStatementNoShortIf -> FOR L_PAREN ForInit STMT_TERMINATOR STMT_TERMINATOR ForUpdate R_PAREN StatementNoShortIf
Rule 184   ForStatementNoShortIf -> FOR L_PAREN ForInit STMT_TERMINATOR Expression STMT_TERMINATOR R_PAREN StatementNoShortIf
Rule 185   ForStatementNoShortIf -> FOR L_PAREN ForInit STMT_TERMINATOR STMT_TERMINATOR R_PAREN StatementNoShortIf
Rule 186   ForStatementNoShortIf -> FOR L_PAREN STMT_TERMINATOR Expression STMT_TERMINATOR R_PAREN StatementNoShortIf
Rule 187   ForStatementNoShortIf -> FOR L_PAREN STMT_TERMINATOR STMT_TERMINATOR ForUpdate R_PAREN StatementNoShortIf
Rule 188   ForStatementNoShortIf -> FOR L_PAREN STMT_TERMINATOR STMT_TERMINATOR R_PAREN StatementNoShortIf
Rule 189   ForInit -> StatementExpressionList
Rule 190   ForInit -> LocalVariableDeclaration
Rule 191   ForUpdate -> StatementExpressionList
Rule 192   StatementExpressionList -> StatementExpression
Rule 193   StatementExpressionList -> StatementExpressionList COMMA StatementExpression
Rule 194   BreakStatement -> BREAK IDENTIFIER STMT_TERMINATOR
Rule 195   BreakStatement -> BREAK STMT_TERMINATOR
Rule 196   ContinueStatement -> CONTINUE IDENTIFIER STMT_TERMINATOR
Rule 197   ContinueStatement -> CONTINUE STMT_TERMINATOR
Rule 198   ReturnStatement -> RETURN Expression STMT_TERMINATOR
Rule 199   ReturnStatement -> RETURN STMT_TERMINATOR
Rule 200   ThrowStatement -> THROW Expression STMT_TERMINATOR
Rule 201   TryStatement -> TRY Block Catches
Rule 202   TryStatement -> TRY Block Catches Finally
Rule 203   TryStatement -> TRY Block Finally
Rule 204   Catches -> CatchClause
Rule 205   Catches -> Catches CatchClause
Rule 206   CatchClause -> CATCH L_PAREN FormalParameter R_PAREN Block
Rule 207   Finally -> FINALLY Block
Rule 208   Primary -> PrimaryNoNewArray
Rule 209   Primary -> ArrayCreationExpression
Rule 210   PrimaryNoNewArray -> Literal
Rule 211   PrimaryNoNewArray -> THIS
Rule 212   PrimaryNoNewArray -> L_PAREN Expression R_PAREN
Rule 213   PrimaryNoNewArray -> ClassInstanceCreationExpression
Rule 214   PrimaryNoNewArray -> FieldAccess
Rule 215   PrimaryNoNewArray -> MethodInvocation
Rule 216   PrimaryNoNewArray -> ArrayAccess
Rule 217   ClassInstanceCreationExpression -> NEW ClassType L_PAREN R_PAREN
Rule 218   ClassInstanceCreationExpression -> NEW ClassType L_PAREN ArgumentList R_PAREN
Rule 219   ArgumentList -> Expression
Rule 220   ArgumentList -> ArgumentList COMMA Expression
Rule 221   ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims
Rule 222   ArrayCreationExpression -> NEW PrimitiveType DimExprs
Rule 223   ArrayCreationExpression -> NEW ClassType DimExprs Dims
Rule 224   ArrayCreationExpression -> NEW ClassType DimExprs
Rule 225   DimExprs -> DimExpr
Rule 226   DimExprs -> DimExprs DimExpr
Rule 227   DimExpr -> L_SQBR Expression R_SQBR
Rule 228   Dims -> L_SQBR R_SQBR
Rule 229   Dims -> Dims L_SQBR R_SQBR
Rule 230   FieldAccess -> Primary DOT IDENTIFIER
Rule 231   FieldAccess -> SUPER DOT IDENTIFIER
Rule 232   MethodInvocation -> Name L_PAREN ArgumentList R_PAREN
Rule 233   MethodInvocation -> Name L_PAREN R_PAREN
Rule 234   MethodInvocation -> Primary DOT IDENTIFIER L_PAREN ArgumentList R_PAREN
Rule 235   MethodInvocation -> Primary DOT IDENTIFIER L_PAREN R_PAREN
Rule 236   MethodInvocation -> SUPER DOT IDENTIFIER L_PAREN ArgumentList R_PAREN
Rule 237   MethodInvocation -> SUPER DOT IDENTIFIER L_PAREN R_PAREN
Rule 238   ArrayAccess -> Name L_SQBR Expression R_SQBR
Rule 239   ArrayAccess -> PrimaryNoNewArray L_SQBR Expression R_SQBR
Rule 240   PostfixExpression -> Primary
Rule 241   PostfixExpression -> Name
Rule 242   PostfixExpression -> PostIncrementExpression
Rule 243   PostfixExpression -> PostDecrementExpression
Rule 244   PostIncrementExpression -> PostfixExpression INCREMENT
Rule 245   PostDecrementExpression -> PostfixExpression DECREMENT
Rule 246   UnaryExpression -> PreIncrementExpression
Rule 247   UnaryExpression -> PreDecrementExpression
Rule 248   UnaryExpression -> PLUS UnaryExpression
Rule 249   UnaryExpression -> MINUS UnaryExpression
Rule 250   UnaryExpression -> UnaryExpressionNotPlusMinus
Rule 251   PreIncrementExpression -> INCREMENT UnaryExpression
Rule 252   PreDecrementExpression -> DECREMENT UnaryExpression
Rule 253   UnaryExpressionNotPlusMinus -> PostfixExpression
Rule 254   UnaryExpressionNotPlusMinus -> BITWISE_NOT UnaryExpression
Rule 255   UnaryExpressionNotPlusMinus -> LOGICAL_NOT UnaryExpression
Rule 256   UnaryExpressionNotPlusMinus -> CastExpression
Rule 257   CastExpression -> L_PAREN PrimitiveType Dims R_PAREN UnaryExpression
Rule 258   CastExpression -> L_PAREN PrimitiveType R_PAREN UnaryExpression
Rule 259   CastExpression -> L_PAREN Expression R_PAREN UnaryExpressionNotPlusMinus
Rule 260   CastExpression -> L_PAREN Name Dims R_PAREN UnaryExpressionNotPlusMinus
Rule 261   MultiplicativeExpression -> UnaryExpression
Rule 262   MultiplicativeExpression -> MultiplicativeExpression MULT UnaryExpression
Rule 263   MultiplicativeExpression -> MultiplicativeExpression DIVIDE UnaryExpression
Rule 264   MultiplicativeExpression -> MultiplicativeExpression MODULO UnaryExpression
Rule 265   AdditiveExpression -> MultiplicativeExpression
Rule 266   AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression
Rule 267   AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression
Rule 268   ShiftExpression -> AdditiveExpression
Rule 269   ShiftExpression -> ShiftExpression L_SHIFT AdditiveExpression
Rule 270   ShiftExpression -> ShiftExpression R_SHIFT AdditiveExpression
Rule 271   RelationalExpression -> ShiftExpression
Rule 272   RelationalExpression -> RelationalExpression LST ShiftExpression
Rule 273   RelationalExpression -> RelationalExpression GRT ShiftExpression
Rule 274   RelationalExpression -> RelationalExpression LEQ ShiftExpression
Rule 275   RelationalExpression -> RelationalExpression GEQ ShiftExpression
Rule 276   RelationalExpression -> RelationalExpression INSTANCEOF ReferenceType
Rule 277   EqualityExpression -> RelationalExpression
Rule 278   EqualityExpression -> EqualityExpression EQUALS RelationalExpression
Rule 279   EqualityExpression -> EqualityExpression NOT_EQUAL RelationalExpression
Rule 280   AndExpression -> EqualityExpression
Rule 281   AndExpression -> AndExpression BITWISE_AND EqualityExpression
Rule 282   ExclusiveOrExpression -> AndExpression
Rule 283   ExclusiveOrExpression -> ExclusiveOrExpression BITWISE_XOR AndExpression
Rule 284   InclusiveOrExpression -> ExclusiveOrExpression
Rule 285   InclusiveOrExpression -> InclusiveOrExpression BITWISE_OR ExclusiveOrExpression
Rule 286   ConditionalAndExpression -> InclusiveOrExpression
Rule 287   ConditionalAndExpression -> ConditionalAndExpression LOGICAL_AND InclusiveOrExpression
Rule 288   ConditionalOrExpression -> ConditionalAndExpression
Rule 289   ConditionalOrExpression -> ConditionalOrExpression LOGICAL_OR ConditionalAndExpression
Rule 290   ConditionalExpression -> ConditionalOrExpression
Rule 291   ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
Rule 292   AssignmentExpression -> ConditionalExpression
Rule 293   AssignmentExpression -> Assignment
Rule 294   AssignmentExpression -> LambdaExpression
Rule 295   Assignment -> LeftHandSide AssignmentOperator AssignmentExpression
Rule 296   LeftHandSide -> Name
Rule 297   LeftHandSide -> FieldAccess
Rule 298   LeftHandSide -> ArrayAccess
Rule 299   AssignmentOperator -> ASSIGN
Rule 300   AssignmentOperator -> MULTEQ
Rule 301   AssignmentOperator -> DIVEQ
Rule 302   AssignmentOperator -> MODEQ
Rule 303   AssignmentOperator -> PLUSEQ
Rule 304   AssignmentOperator -> MINUSEQ
Rule 305   AssignmentOperator -> LSHIFTEQ
Rule 306   AssignmentOperator -> RSHIFTEQ
Rule 307   Expression -> AssignmentExpression
Rule 308   LambdaExpression -> LAMBDA L_PAREN FormalParameterList R_PAREN LAMBDA_TOKEN Block
Rule 309   LambdaExpression -> LAMBDA L_PAREN R_PAREN LAMBDA_TOKEN Block
Rule 310   ConstantExpression -> Expression

Terminals, with rules where they appear

ABSTRACT             : 
ASSERT               : 
ASSIGN               : 72 299
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BLOCK_CLOSER         : 58 59 103 104 105 106 111 112 115 116 159 160 161 162
BLOCK_COMMENT        : 
BLOCK_OPENER         : 58 59 103 104 105 106 111 112 115 116 159 160 161 162
BOOLEAN              : 10
BREAK                : 194 195
BYTE                 : 13
CASE                 : 168
CATCH                : 206
CHAR                 : 17
CHAR_CONSTANT        : 4
CLASS                : 53 54 55 56
COLON                : 145 146 168 169 291
COMMA                : 70 89 93 114 193 220
CONST                : 
CONTINUE             : 196 197
DECR                 : 
DEFAULT              : 169
DIV                  : 
DIVEQ                : 301
DO                   : 172
DOT                  : 29 46 230 231 234 235 236 237
DOUBLE               : 19
ELSE                 : 156 157
EQUALS               : 278
EXTENDS              : 57
FINAL                : 52
FINALLY              : 207
FLOAT                : 18
FLOAT_CONSTANT       : 3
FOR                  : 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188
GREATER              : 
GREQ                 : 
IDENTIFIER           : 28 29 53 54 55 56 73 86 87 145 146 194 196 230 231 234 235 236 237
IF                   : 155 156 157
IMPORT               : 45 46
INCR                 : 
INLINE_COMMENT       : 
INSTANCEOF           : 276
INT                  : 15
INT_CONSTANT         : 2
LESEQ                : 
LESSER               : 
LOGIC_AND            : 
LOGIC_NOT            : 
LOGIC_OR             : 
LSHIFT               : 
LSHIFTEQ             : 305
L_PAREN              : 86 87 101 102 107 108 109 110 155 156 157 158 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 206 212 217 218 232 233 234 235 236 237 257 258 259 260 308 309
L_SQBR               : 23 24 25 74 227 228 229 238 239
MINUS                : 249 267
MINUSEQ              : 304
MOD                  : 
MODEQ                : 302
MULT                 : 46 262
MULTEQ               : 300
NATIVE               : 
NEW                  : 217 218 221 222 223 224
NOTEQ                : 
NULL                 : 6
PACKAGE              : 42
PLUS                 : 248 266
PLUSEQ               : 303
QUES                 : 
RETURN               : 198 199
RSHIFT               : 
RSHIFTEQ             : 306
R_PAREN              : 86 87 101 102 107 108 109 110 155 156 157 158 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 206 212 217 218 232 233 234 235 236 237 257 258 259 260 308 309
R_SQBR               : 23 24 25 74 227 228 229 238 239
SEMICOLON            : 
SHORT                : 14
STATIC               : 51 96
STR_CONSTANT         : 5
SUPER                : 109 110 231 236 237
SWITCH               : 158
THIS                 : 107 108 211
THROW                : 200
THROWS               : 91
TRY                  : 201 202 203
VOID                 : 82 83 84 85
WHILE                : 170 171 172
error                : 

Nonterminals, with rules where they appear

AdditiveExpression   : 266 267 268 269 270
AndExpression        : 281 282 283
ArgumentList         : 107 109 218 220 232 234 236
ArrayAccess          : 216 298
ArrayCreationExpression : 209
ArrayInitializer     : 76
ArrayType            : 20 25
Assignment           : 148 293
AssignmentExpression : 295 307
AssignmentOperator   : 295
BITWISE_AND          : 281
BITWISE_NOT          : 254
BITWISE_OR           : 285
BITWISE_XOR          : 283
Block                : 94 96 134 201 202 203 206 207 308 309
BlockStatement       : 117 118
BlockStatements      : 103 105 116 118 165
BreakStatement       : 139
CastExpression       : 256
CatchClause          : 204 205
Catches              : 201 202 205
ClassBody            : 53 54 55 56
ClassBodyDeclaration : 60 61
ClassBodyDeclarations : 59 61
ClassDeclaration     : 47
ClassInstanceCreationExpression : 154 213
ClassMemberDeclaration : 62
ClassType            : 21 57 92 93 217 218 223 224
ClassTypeList        : 91 93
CompilationUnit      : 1
ConditionalAndExpression : 287 288 289
ConditionalExpression : 291 292
ConditionalOrExpression : 289 290 291
ConstantExpression   : 168
ConstructorBody      : 97 98 99 100
ConstructorDeclaration : 63
ConstructorDeclarator : 97 98 99 100
ContinueStatement    : 140
DECREMENT            : 245 252
DIVIDE               : 263
DimExpr              : 225 226
DimExprs             : 221 222 223 224 226
Dims                 : 221 223 229 257 260
DoStatement          : 138
EmptyStatement       : 135
EqualityExpression   : 278 279 280 281
ExclusiveOrExpression : 283 284 285
ExplicitConstructorInvocation : 103 104
Expression           : 75 155 156 157 158 170 171 172 173 174 176 178 181 182 184 186 198 200 212 219 220 227 238 239 259 291 310
ExpressionStatement  : 136
FieldAccess          : 214 297
FieldDeclaration     : 65
Finally              : 202 203
FloatingPointType    : 12
ForInit              : 173 175 176 177 181 183 184 185
ForStatement         : 128
ForStatementNoShortIf : 133
ForUpdate            : 173 174 175 179 181 182 183 187
FormalParameter      : 88 89 206
FormalParameterList  : 87 89 101 308
GEQ                  : 275
GRT                  : 273
Goal                 : 0
INCREMENT            : 244 251
IfThenElseStatement  : 126
IfThenElseStatementNoShortIf : 131
IfThenStatement      : 125
ImportDeclaration    : 38 39
ImportDeclarations   : 30 31 33 35 39
InclusiveOrExpression : 285 286 287
IntegralType         : 11
LAMBDA               : 308 309
LAMBDA_TOKEN         : 308 309
LEQ                  : 274
LOGICAL_AND          : 287
LOGICAL_NOT          : 255
LOGICAL_OR           : 289
LONG                 : 16
LST                  : 272
L_SHIFT              : 269
LabeledStatement     : 124
LabeledStatementNoShortIf : 130
LambdaExpression     : 294
LeftHandSide         : 295
Literal              : 210
LocalVariableDeclaration : 121 190
LocalVariableDeclarationStatement : 119
MODULO               : 264
MethodBody           : 77
MethodDeclaration    : 66
MethodDeclarator     : 78 79 80 81 82 83 84 85
MethodHeader         : 77
MethodInvocation     : 153 215
Modifier             : 49 50
Modifiers            : 50 53 54 67 78 79 82 83 97 98
MultiplicativeExpression : 262 263 264 265 266 267
NOT_EQUAL            : 279
Name                 : 22 24 29 42 45 46 232 233 238 241 260 296
NumericType          : 9
PackageDeclaration   : 30 31 32 34
PostDecrementExpression : 152 243
PostIncrementExpression : 151 242
PostfixExpression    : 244 245 253
PreDecrementExpression : 150 247
PreIncrementExpression : 149 246
Primary              : 230 234 235 240
PrimaryNoNewArray    : 208 239
PrimitiveType        : 7 23 221 222 257 258
QUESTION             : 291
QualifiedName        : 27
R_SHIFT              : 270
ReferenceType        : 8 276
RelationalExpression : 272 273 274 275 276 277 278 279
ReturnStatement      : 141
STMT_TERMINATOR      : 42 45 46 48 67 68 95 107 108 109 110 121 144 147 172 173 173 174 174 175 175 176 176 177 177 178 178 179 179 180 180 181 181 182 182 183 183 184 184 185 185 186 186 187 187 188 188 194 195 196 197 198 199 200
ShiftExpression      : 269 270 271 272 273 274 275
SimpleName           : 26 101 102
SingleTypeImportDeclaration : 43
Statement            : 120 145 155 156 170 172 173 174 175 176 177 178 179 180
StatementExpression  : 147 192 193
StatementExpressionList : 189 191 193
StatementNoShortIf   : 146 156 157 157 171 181 182 183 184 185 186 187 188
StatementWithoutTrailingSubstatement : 123 129
StaticInitializer    : 64
Super                : 53 55
SwitchBlock          : 158
SwitchBlockStatementGroup : 163 164
SwitchBlockStatementGroups : 160 161 164
SwitchLabel          : 166 167
SwitchLabels         : 160 162 165 167
SwitchStatement      : 137
ThrowStatement       : 142
Throws               : 78 80 82 84 97 99
TryStatement         : 143
Type                 : 67 68 78 79 80 81 90 122
TypeDeclaration      : 40 41
TypeDeclarations     : 30 32 33 36 41
TypeImportOnDemandDeclaration : 44
UnaryExpression      : 248 249 251 252 254 255 257 258 261 262 263 264
UnaryExpressionNotPlusMinus : 250 259 260
VariableDeclarator   : 69 70
VariableDeclaratorId : 71 72 74 90
VariableDeclarators  : 67 68 70 122
VariableInitializer  : 72 113 114
VariableInitializers : 111 114
WhileStatement       : 127
WhileStatementNoShortIf : 132

